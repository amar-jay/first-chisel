#!/usr/bin/env bash
set -eo pipefail

# ---------------------------- #
#        CLI Framework         #
# ---------------------------- #

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# CLI Configuration
VERSION="1.0.0"
SCALA_EXT=".scala"
DEFAULT_TARGET_DIR="build"
DEFAULT_OUTPUT_TYPE="systemverilog"

# ---------------------------- #
#         Core Functions       #
# ---------------------------- #

validate_dependencies() {
    local missing=()
    for cmd in scala-cli iverilog; do
        if ! command -v $cmd &> /dev/null; then
            missing+=("$cmd")
        fi
    done

    if [ ${#missing[@]} -gt 0 ]; then
        error "Missing dependencies: ${missing[*]}"
        exit 1
    fi
}

validate_scala_file() {
    local file_path=$1

    # if the path is a directory, append all the scala files in it
    if [ -d "$file_path" ]; then
        file_path=$(find "$file_path" -type f -name "*$SCALA_EXT")
        # one line file path
        file_path=$(echo "$file_path" | tr '\n' ' ')
        if [ -z "$file_path" ]; then
            error "No Scala files found in directory: ${file_path}"
            exit 1
        fi

        # on exit restore the previous directory
        # trap 'cd -' EXIT
        return 0
    fi


    # if the path is not absolute, resolve it to the absolute path
    if [[ ! "$file_path" =~ \.scala$ ]]; then
        file_path="${file_path}${SCALA_EXT}"
    fi
    
    if [ ! -f "$file_path" ]; then
        error "Scala file not found: ${file_path}"
        # exit 1
    fi

    
    echo "$file_path"

    # return "$file_path"
}

generate_hdl() {
    local input_file=$1
    local output_type=$2
    local target_dir=$3

    printf "Generating %s from %s\n" "$output_filename" "$input_file"
    local output_filename="${input_file%.*}"
    if [ -z "$input_file" ]; then
        output_filename="$(basename "$PWD")"
    fi
    
    local ext="v"
    [[ "$output_type" == "systemverilog" ]] && ext="sv"
    
    printf "Output filename: %s\n" "$output_filename"
    local output_file="${target_dir}/$(basename "${output_filename}").${ext}"
    info "Generating ${output_type} from ${input_file}"
    mkdir -p "$target_dir"  
    scala-cli "$input_file" \
        --output "$output_file" \
        --target "$output_type" \
        --verbose
    
    if [ $? -eq 0 ]; then
        success "Generated: ${output_file}"
    else
        error "HDL generation failed"
        exit 1
    fi
}

# ---------------------------- #
#         CLI Commands         #
# ---------------------------- #

cmd_test() {
    local input_file=$(validate_scala_file "$1")
    info "Running tests for: ${input_file}"
    scala-cli test "$input_file"
}

cmd_build() {
    local input_file=$(validate_scala_file "$1")
    local output_type=${2:-$DEFAULT_OUTPUT_TYPE}
    local target_dir=${3:-$DEFAULT_TARGET_DIR}
    
    generate_hdl "$input_file" "$output_type" "$target_dir"
}

cmd_visualize() {
    local input_file=$(validate_scala_file "$1")
    local target_dir=${2:-$DEFAULT_TARGET_DIR}
    local hdl_file="${target_dir}/$(basename "${input_file%.*}").sv"
    
    if [ ! -f "$hdl_file" ]; then
        error "HDL file missing: ${hdl_file}"
        error "Run build command first"
        exit 1
    fi
    
    info "Simulating design: ${hdl_file}"
    iverilog -o "${hdl_file%.*}" "$hdl_file"
    success "Generated simulation artifact: ${hdl_file%.*}"
}

# ---------------------------- #
#       Output Helpers         #
# ---------------------------- #

error() { echo -e "${RED}❌ ERROR: $*${NC}" >&2; }
success() { echo -e "${GREEN}✅ $*${NC}"; }
info() { echo -e "${BLUE}ℹ️  $*${NC}"; }
warn() { echo -e "${YELLOW}⚠️  $*${NC}"; }

show_help() {
    cat << EOF
HDL Generator (v${VERSION})

Usage:
  hdl <command> [options] <input-file>

Commands:
  test       Run Scala tests
  build      Generate HDL from Scala code
  visualize  Simulate generated HDL

Options:
  -o, --output-type   Output format (verilog|systemverilog) [default: systemverilog]
  -t, --target-dir    Output directory [default: build]
  -h, --help          Show this help
  -v, --version       Show version
  --verbose           Enable verbose output

Examples:
  hdl test MyCircuit
  hdl build MyCircuit -o verilog
  hdl visualize MyCircuit --target-dir output
EOF
}

# ---------------------------- #
#       Main Execution         #
# ---------------------------- #

parse_args() {
    VALID_COMMANDS=("test" "build" "visualize")
    COMMAND=""
    VERBOSE=false

    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help) show_help; exit 0 ;;
            -v|--version) echo "v${VERSION}"; exit 0 ;;
            --verbose) VERBOSE=true; shift ;;
            -o|--output-type)
                OUTPUT_TYPE="$2"
                shift 2
                ;;
            -t|--target-dir)
                TARGET_DIR="$2"
                shift 2
                ;;
            *)
                if [[ " ${VALID_COMMANDS[*]} " == *" $1 "* ]]; then
                    COMMAND="$1"
                    shift
                    INPUT_FILE="$1"
                    shift
                else
                    error "Invalid argument: $1"
                    show_help
                    exit 1
                fi
                ;;
        esac
    done

    if [ -z "$COMMAND" ]; then
        error "No command specified"
        show_help
        exit 1
    fi
}

main() {
    validate_dependencies
    parse_args "$@"
    
    case $COMMAND in
        test) cmd_test "$INPUT_FILE" ;;
        build) cmd_build "$INPUT_FILE" "${OUTPUT_TYPE:-$DEFAULT_OUTPUT_TYPE}" "${TARGET_DIR:-$DEFAULT_TARGET_DIR}" ;;
        visualize) cmd_visualize "$INPUT_FILE" "${TARGET_DIR:-$DEFAULT_TARGET_DIR}" ;;
        *) error "Invalid command: $COMMAND"; exit 1 ;;
    esac
}

main "$@"