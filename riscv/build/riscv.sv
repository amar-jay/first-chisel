// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module InstructionFetcher(
  input  [31:0] io_inst,
  output [4:0]  io_rd_addr,
                io_rs1_addr,
                io_rs2_addr,
  output [31:0] io_imm,
  output [5:0]  io__op,
  output [2:0]  io_inst_type
);

  wire [31:0]     io_imm_0;
  wire [7:0][5:0] _GEN = '{6'h2C, 6'h2B, 6'h2A, 6'h29, 6'h0, 6'h0, 6'h28, 6'h27};
  wire            _GEN_0 = io_inst[6:0] == 7'h33;
  wire            _GEN_1 = io_inst[14:12] == 3'h0;
  wire            _GEN_2 = io_inst[14:12] == 3'h1;
  wire            _GEN_3 = io_inst[14:12] == 3'h2;
  wire [7:0][5:0] _GEN_4 =
    {{6'h5},
     {6'h4},
     {io_inst[30] ? 6'h8 : 6'h7},
     {6'h3},
     {6'hA},
     {6'h9},
     {6'h6},
     {io_inst[30] ? 6'h2 : 6'h1}};
  wire            _GEN_5 = io_inst[6:0] == 7'h13;
  wire [7:0][5:0] _GEN_6 =
    {{6'h16},
     {6'h15},
     {{5'hC, io_inst[30]}},
     {6'h14},
     {6'h1B},
     {6'h1A},
     {6'h17},
     {6'h13}};
  wire            _GEN_7 = io_inst[6:0] == 7'h3;
  wire            _GEN_8 = io_inst[6:0] == 7'h67;
  wire            _GEN_9 = io_inst[6:0] == 7'h73;
  wire            _GEN_10 = io_inst[6:0] == 7'h23;
  wire            _GEN_11 = io_inst[6:0] == 7'h63;
  wire            _GEN_12 = io_inst[6:0] == 7'h37;
  wire            _GEN_13 = io_inst[6:0] == 7'h17;
  wire            _GEN_14 = io_inst[6:0] == 7'h6F;
  wire            _GEN_15 = _GEN_12 | _GEN_13;
  wire            _GEN_16 = _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9;
  assign io_imm_0 =
    _GEN_0
      ? 32'h0
      : _GEN_16
          ? {{20{io_inst[31]}}, io_inst[31:20]}
          : _GEN_10
              ? {{20{io_inst[31]}}, io_inst[31:25], io_inst[11:7]}
              : _GEN_11
                  ? {{20{io_inst[31]}}, io_inst[7], io_inst[30:25], io_inst[11:8], 1'h0}
                  : _GEN_15
                      ? {io_inst[31:12], 12'h0}
                      : _GEN_14
                          ? {{12{io_inst[31]}},
                             io_inst[19:12],
                             io_inst[20],
                             io_inst[30:21],
                             1'h0}
                          : 32'h0;
  assign io_rd_addr = io_inst[11:7];
  assign io_rs1_addr = io_inst[19:15];
  assign io_rs2_addr = io_inst[24:20];
  assign io_imm = io_imm_0;
  assign io__op =
    _GEN_0
      ? _GEN_4[io_inst[14:12]]
      : _GEN_5
          ? _GEN_6[io_inst[14:12]]
          : _GEN_7
              ? (_GEN_1
                   ? 6'h1C
                   : _GEN_2
                       ? 6'h1D
                       : _GEN_3
                           ? 6'h1E
                           : io_inst[14:12] == 3'h4
                               ? 6'h1F
                               : {io_inst[14:12] == 3'h5, 5'h0})
              : _GEN_8
                  ? (_GEN_1 ? 6'h23 : 6'h0)
                  : _GEN_9
                      ? (_GEN_1
                           ? (io_imm_0 == 32'h0
                                ? 6'h21
                                : io_imm_0 == 32'h1 ? 6'h22 : 6'h0)
                           : 6'h0)
                      : _GEN_10
                          ? (_GEN_1 ? 6'h24 : _GEN_2 ? 6'h25 : _GEN_3 ? 6'h26 : 6'h0)
                          : _GEN_11
                              ? _GEN[io_inst[14:12]]
                              : _GEN_12
                                  ? 6'h2E
                                  : _GEN_13 ? 6'h2F : _GEN_14 ? 6'h2D : 6'h0;
  assign io_inst_type =
    _GEN_0
      ? 3'h1
      : _GEN_16
          ? 3'h2
          : _GEN_10 ? 3'h3 : _GEN_11 ? 3'h4 : _GEN_15 ? 3'h5 : _GEN_14 ? 3'h6 : 3'h0;
endmodule

module RegisterFile(
  input         clock,
                reset,
                io_read0_en,
  input  [4:0]  io_read0_addr,
  output [31:0] io_read0_data,
  output        io_read0_ready,
  input         io_read1_en,
  input  [4:0]  io_read1_addr,
  output [31:0] io_read1_data,
  output        io_read1_ready,
  input         io_write_en,
  input  [4:0]  io_write_addr,
  input  [31:0] io_write_data
);

  reg  [31:0]       registers_0;
  reg  [31:0]       registers_1;
  reg  [31:0]       registers_2;
  reg  [31:0]       registers_3;
  reg  [31:0]       registers_4;
  reg  [31:0]       registers_5;
  reg  [31:0]       registers_6;
  reg  [31:0]       registers_7;
  reg  [31:0]       registers_8;
  reg  [31:0]       registers_9;
  reg  [31:0]       registers_10;
  reg  [31:0]       registers_11;
  reg  [31:0]       registers_12;
  reg  [31:0]       registers_13;
  reg  [31:0]       registers_14;
  reg  [31:0]       registers_15;
  reg  [31:0]       registers_16;
  reg  [31:0]       registers_17;
  reg  [31:0]       registers_18;
  reg  [31:0]       registers_19;
  reg  [31:0]       registers_20;
  reg  [31:0]       registers_21;
  reg  [31:0]       registers_22;
  reg  [31:0]       registers_23;
  reg  [31:0]       registers_24;
  reg  [31:0]       registers_25;
  reg  [31:0]       registers_26;
  reg  [31:0]       registers_27;
  reg  [31:0]       registers_28;
  reg  [31:0]       registers_29;
  reg  [31:0]       registers_30;
  reg  [31:0]       registers_31;
  wire              io_read0_ready_0 = io_read0_en & (|io_read0_addr);
  wire [31:0][31:0] _GEN =
    {{registers_31},
     {registers_30},
     {registers_29},
     {registers_28},
     {registers_27},
     {registers_26},
     {registers_25},
     {registers_24},
     {registers_23},
     {registers_22},
     {registers_21},
     {registers_20},
     {registers_19},
     {registers_18},
     {registers_17},
     {registers_16},
     {registers_15},
     {registers_14},
     {registers_13},
     {registers_12},
     {registers_11},
     {registers_10},
     {registers_9},
     {registers_8},
     {registers_7},
     {registers_6},
     {registers_5},
     {registers_4},
     {registers_3},
     {registers_2},
     {registers_1},
     {registers_0}};
  wire              io_read1_ready_0 = io_read1_en & (|io_read1_addr);
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & (|registers_0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Register x0 must always be zero\n    at register.scala:122 assert(registers(0) === 0.S, \"Register x0 must always be zero\")\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      registers_0 <= 32'h0;
      registers_1 <= 32'h0;
      registers_2 <= 32'h0;
      registers_3 <= 32'h0;
      registers_4 <= 32'h0;
      registers_5 <= 32'h0;
      registers_6 <= 32'h0;
      registers_7 <= 32'h0;
      registers_8 <= 32'h0;
      registers_9 <= 32'h0;
      registers_10 <= 32'h0;
      registers_11 <= 32'h0;
      registers_12 <= 32'h0;
      registers_13 <= 32'h0;
      registers_14 <= 32'h0;
      registers_15 <= 32'h0;
      registers_16 <= 32'h0;
      registers_17 <= 32'h0;
      registers_18 <= 32'h0;
      registers_19 <= 32'h0;
      registers_20 <= 32'h0;
      registers_21 <= 32'h0;
      registers_22 <= 32'h0;
      registers_23 <= 32'h0;
      registers_24 <= 32'h0;
      registers_25 <= 32'h0;
      registers_26 <= 32'h0;
      registers_27 <= 32'h0;
      registers_28 <= 32'h0;
      registers_29 <= 32'h0;
      registers_30 <= 32'h0;
      registers_31 <= 32'h0;
    end
    else begin
      automatic logic _GEN_0 = io_write_en & (|io_write_addr);
      if (_GEN_0 & ~(|io_write_addr))
        registers_0 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h1)
        registers_1 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h2)
        registers_2 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h3)
        registers_3 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h4)
        registers_4 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h5)
        registers_5 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h6)
        registers_6 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h7)
        registers_7 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h8)
        registers_8 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h9)
        registers_9 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'hA)
        registers_10 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'hB)
        registers_11 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'hC)
        registers_12 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'hD)
        registers_13 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'hE)
        registers_14 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'hF)
        registers_15 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h10)
        registers_16 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h11)
        registers_17 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h12)
        registers_18 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h13)
        registers_19 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h14)
        registers_20 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h15)
        registers_21 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h16)
        registers_22 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h17)
        registers_23 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h18)
        registers_24 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h19)
        registers_25 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h1A)
        registers_26 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h1B)
        registers_27 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h1C)
        registers_28 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h1D)
        registers_29 <= io_write_data;
      if (_GEN_0 & io_write_addr == 5'h1E)
        registers_30 <= io_write_data;
      if (_GEN_0 & (&io_write_addr))
        registers_31 <= io_write_data;
    end
  end // always @(posedge)
  assign io_read0_data =
    io_read0_ready_0
      ? (io_write_en & io_write_addr == io_read0_addr
           ? io_write_data
           : _GEN[io_read0_addr])
      : 32'h0;
  assign io_read0_ready = io_read0_ready_0;
  assign io_read1_data =
    io_read1_ready_0
      ? (io_write_en & io_write_addr == io_read1_addr
           ? io_write_data
           : _GEN[io_read1_addr])
      : 32'h0;
  assign io_read1_ready = io_read1_ready_0;
endmodule

module RISCVCore(
  input         clock,
                reset,
  input  [31:0] io_inst,
  output [31:0] io_rddata
);

  wire        _GEN;
  wire [31:0] _regfile_io_read0_data;
  wire        _regfile_io_read0_ready;
  wire [31:0] _regfile_io_read1_data;
  wire        _regfile_io_read1_ready;
  wire [4:0]  _inst_fetcher_io_rd_addr;
  wire [4:0]  _inst_fetcher_io_rs1_addr;
  wire [4:0]  _inst_fetcher_io_rs2_addr;
  wire [31:0] _inst_fetcher_io_imm;
  wire [5:0]  _inst_fetcher_io__op;
  wire [2:0]  _inst_fetcher_io_inst_type;
  reg  [31:0] pc;
  reg  [31:0] rs1_data;
  reg  [31:0] rs2_data;
  wire [31:0] _regfile_io_write_data_T_23 = pc + 32'h4;
  wire        _GEN_0 = _inst_fetcher_io_inst_type == 3'h1;
  wire        _GEN_1 = _inst_fetcher_io_inst_type == 3'h3;
  wire        _GEN_2 = _inst_fetcher_io_inst_type == 3'h4;
  wire        _GEN_3 = _GEN_0 | _GEN_1 | _GEN_2;
  wire        _GEN_4 = _inst_fetcher_io_inst_type == 3'h2;
  wire        _GEN_5 = _inst_fetcher_io__op == 6'h23;
  wire        _GEN_6 = _inst_fetcher_io__op == 6'h27;
  wire        _GEN_7 = _inst_fetcher_io__op == 6'h28;
  wire        _GEN_8 = _inst_fetcher_io__op == 6'h29;
  wire        _GEN_9 = _inst_fetcher_io__op == 6'h2A;
  wire        _GEN_10 = _inst_fetcher_io__op == 6'h2B;
  wire        _GEN_11 = _inst_fetcher_io__op == 6'h2C;
  wire        _GEN_12 = _inst_fetcher_io__op == 6'h2D;
  wire        _GEN_13 = _inst_fetcher_io__op == 6'h2E;
  wire        _GEN_14 = _inst_fetcher_io__op == 6'h2F;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & ~reset) begin
        automatic logic [63:0][7:0] _GEN_15 =
          '{8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h43,
            8'h49,
            8'h4C,
            8'h55,
            8'h55,
            8'h45,
            8'h54,
            8'h45,
            8'h51,
            8'h57,
            8'h48,
            8'h42,
            8'h52,
            8'h4B,
            8'h4C,
            8'h55,
            8'h55,
            8'h57,
            8'h48,
            8'h42,
            8'h55,
            8'h49,
            8'h49,
            8'h49,
            8'h49,
            8'h49,
            8'h49,
            8'h49,
            8'h49,
            8'h55,
            8'h4D,
            8'h55,
            8'h56,
            8'h55,
            8'h55,
            8'h48,
            8'h4C,
            8'h55,
            8'h54,
            8'h41,
            8'h4C,
            8'h4C,
            8'h44,
            8'h52,
            8'h52,
            8'h42,
            8'h44,
            8'h50};
        automatic logic [63:0][7:0] _GEN_16 =
          '{8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h50,
            8'h55,
            8'h41,
            8'h45,
            8'h54,
            8'h47,
            8'h4C,
            8'h4E,
            8'h45,
            8'h53,
            8'h53,
            8'h53,
            8'h4C,
            8'h41,
            8'h4C,
            8'h48,
            8'h42,
            8'h4C,
            8'h4C,
            8'h4C,
            8'h49,
            8'h54,
            8'h41,
            8'h4C,
            8'h4C,
            8'h44,
            8'h52,
            8'h52,
            8'h44,
            8'h4D,
            8'h45,
            8'h56,
            8'h49,
            8'h48,
            8'h53,
            8'h4C,
            8'h55,
            8'h54,
            8'h4C,
            8'h52,
            8'h52,
            8'h4C,
            8'h4E,
            8'h4F,
            8'h4F,
            8'h55,
            8'h44,
            8'h4F};
        automatic logic [63:0][7:0] _GEN_17 =
          '{8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h49,
            8'h4C,
            8'h4A,
            8'h47,
            8'h4C,
            8'h42,
            8'h42,
            8'h42,
            8'h42,
            8'h5F,
            8'h5F,
            8'h5F,
            8'h41,
            8'h45,
            8'h41,
            8'h4C,
            8'h4C,
            8'h5F,
            8'h5F,
            8'h5F,
            8'h54,
            8'h4C,
            8'h52,
            8'h52,
            8'h4C,
            8'h4E,
            8'h4F,
            8'h4F,
            8'h44,
            8'h45,
            8'h52,
            8'h49,
            8'h44,
            8'h4C,
            8'h48,
            8'h55,
            8'h4D,
            8'h4C,
            8'h53,
            8'h53,
            8'h53,
            8'h53,
            8'h41,
            8'h5F,
            8'h58,
            8'h53,
            8'h41,
            8'h4E};
        automatic logic [63:0][7:0] _GEN_18 =
          '{8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h3F,
            8'h5F,
            8'h20,
            8'h20,
            8'h42,
            8'h42,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h49,
            8'h49,
            8'h5F,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h5F,
            8'h49,
            8'h49,
            8'h49,
            8'h49,
            8'h49,
            8'h20,
            8'h49,
            8'h49,
            8'h52,
            8'h20,
            8'h52,
            8'h20,
            8'h5F,
            8'h4D,
            8'h52,
            8'h20,
            8'h52,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h20,
            8'h20};
        automatic logic             _GEN_19 = _inst_fetcher_io__op == 6'h0;
        automatic logic [7:0]       _GEN_20 = _GEN_19 ? 8'h20 : 8'h3F;
        automatic logic             _GEN_21 = _inst_fetcher_io__op == 6'h1;
        automatic logic             _GEN_22 = _inst_fetcher_io__op == 6'h2;
        automatic logic             _GEN_23 = _inst_fetcher_io__op == 6'h3;
        automatic logic [7:0]       _GEN_24 =
          _GEN_23 | _GEN_22 | _GEN_21 ? 8'h5F : _GEN_20;
        automatic logic             _GEN_25 = _inst_fetcher_io__op == 6'h4;
        automatic logic             _GEN_26 = _inst_fetcher_io__op == 6'h5;
        automatic logic             _GEN_27 = _inst_fetcher_io__op == 6'h6;
        automatic logic             _GEN_28 = _inst_fetcher_io__op == 6'h7;
        automatic logic             _GEN_29 = _inst_fetcher_io__op == 6'h8;
        automatic logic             _GEN_30 = _inst_fetcher_io__op == 6'h9;
        automatic logic             _GEN_31 = _inst_fetcher_io__op == 6'hA;
        automatic logic             _GEN_32 = _inst_fetcher_io__op == 6'hB;
        automatic logic             _GEN_33 = _inst_fetcher_io__op == 6'hC;
        automatic logic [7:0]       _GEN_34 =
          _GEN_33 | _GEN_32 | _GEN_31 | _GEN_30 | _GEN_29 | _GEN_28 | _GEN_27 | _GEN_26
          | _GEN_25 | _GEN_23 | _GEN_22 | _GEN_21 | _GEN_19
            ? 8'h20
            : 8'h3F;
        automatic logic             _GEN_35 = _inst_fetcher_io__op == 6'hD;
        automatic logic             _GEN_36 = _inst_fetcher_io__op == 6'hE;
        automatic logic             _GEN_37 = _inst_fetcher_io__op == 6'hF;
        automatic logic             _GEN_38 = _GEN_37 | _GEN_36;
        automatic logic             _GEN_39 = _inst_fetcher_io__op == 6'h10;
        automatic logic             _GEN_40 = _inst_fetcher_io__op == 6'h11;
        automatic logic             _GEN_41 = _inst_fetcher_io__op == 6'h12;
        automatic logic             _GEN_42 = _inst_fetcher_io__op == 6'h13;
        automatic logic             _GEN_43 = _inst_fetcher_io__op == 6'h14;
        automatic logic             _GEN_44 = _inst_fetcher_io__op == 6'h15;
        automatic logic             _GEN_45 = _inst_fetcher_io__op == 6'h16;
        automatic logic             _GEN_46 = _inst_fetcher_io__op == 6'h17;
        automatic logic             _GEN_47 = _inst_fetcher_io__op == 6'h18;
        automatic logic             _GEN_48 = _inst_fetcher_io__op == 6'h19;
        automatic logic             _GEN_49 = _inst_fetcher_io__op == 6'h1A;
        automatic logic             _GEN_50 = _inst_fetcher_io__op == 6'h1B;
        automatic logic             _GEN_51 = _inst_fetcher_io__op == 6'h1C;
        automatic logic             _GEN_52 = _inst_fetcher_io__op == 6'h1D;
        automatic logic             _GEN_53 = _inst_fetcher_io__op == 6'h1E;
        automatic logic             _GEN_54 = _GEN_53 | _GEN_52 | _GEN_51;
        automatic logic             _GEN_55 = _inst_fetcher_io__op == 6'h1F;
        automatic logic             _GEN_56 = _inst_fetcher_io__op == 6'h20;
        automatic logic             _GEN_57 = _inst_fetcher_io__op == 6'h21;
        automatic logic             _GEN_58 = _inst_fetcher_io__op == 6'h22;
        automatic logic             _GEN_59 = _inst_fetcher_io__op == 6'h24;
        automatic logic             _GEN_60 = _inst_fetcher_io__op == 6'h25;
        automatic logic             _GEN_61 = _inst_fetcher_io__op == 6'h26;
        automatic logic             _GEN_62 =
          _GEN_13 | _GEN_12 | _GEN_11 | _GEN_10 | _GEN_9 | _GEN_8 | _GEN_7 | _GEN_6
          | _GEN_61 | _GEN_60 | _GEN_59 | _GEN_5;
        automatic logic [63:0][7:0] _GEN_63 =
          {{_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {8'h55},
           {8'h5F},
           {8'h5F},
           {8'h42},
           {8'h42},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h49},
           {8'h49},
           {8'h49},
           {8'h4A},
           {8'h52},
           {8'h43},
           {8'h5F},
           {8'h5F},
           {8'h49},
           {8'h49},
           {8'h49},
           {8'h4C},
           {8'h53},
           {8'h53},
           {8'h53},
           {8'h53},
           {8'h41},
           {8'h5F},
           {8'h58},
           {8'h41},
           {8'h52},
           {8'h5F},
           {8'h44},
           {8'h5F},
           {8'h55},
           {8'h4C},
           {8'h4D},
           {8'h5F},
           {8'h53},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h49},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24},
           {_GEN_24}};
        automatic logic [63:0][7:0] _GEN_64 =
          {{_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {8'h41},
           {8'h49},
           {8'h49},
           {8'h5F},
           {8'h5F},
           {8'h49},
           {8'h49},
           {8'h49},
           {8'h49},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h42},
           {8'h45},
           {8'h49},
           {8'h49},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h53},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h49},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h4D},
           {8'h5F},
           {8'h4D},
           {8'h4D},
           {8'h55},
           {8'h5F},
           {8'h4D},
           {8'h5F},
           {8'h49},
           {8'h49},
           {8'h49},
           {8'h49},
           {8'h49},
           {8'h5F},
           {8'h49},
           {8'h49},
           {8'h49},
           {_GEN_20}};
        automatic logic [63:0][7:0] _GEN_65 =
          {{_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {_GEN_20},
           {8'h49},
           {8'h55},
           {8'h4A},
           {8'h5F},
           {8'h5F},
           {8'h42},
           {8'h42},
           {8'h42},
           {8'h42},
           {8'h20},
           {8'h20},
           {8'h20},
           {8'h5F},
           {8'h5F},
           {8'h49},
           {8'h49},
           {8'h49},
           {8'h20},
           {8'h20},
           {8'h20},
           {8'h49},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h49},
           {8'h5F},
           {8'h5F},
           {8'h5F},
           {8'h52},
           {8'h5F},
           {8'h52},
           {8'h4D},
           {8'h5F},
           {8'h5F},
           {8'h52},
           {8'h5F},
           {8'h52},
           {8'h52},
           {8'h52},
           {8'h52},
           {8'h52},
           {8'h20},
           {8'h52},
           {8'h52},
           {8'h52},
           {_GEN_20}};
        $fwrite(32'h80000002, "ALU Operation: op = %c%c%c%c%c%c%c%c%c%c a = %d b = %d\n",
                _GEN_14 | _GEN_62
                  ? 8'h20
                  : _GEN_58
                      ? 8'h49
                      : _GEN_57 | _GEN_56 | _GEN_55 | _GEN_53 | _GEN_52 | _GEN_51
                        | _GEN_50 | _GEN_49 | _GEN_48 | _GEN_47 | _GEN_46 | _GEN_45
                        | _GEN_44 | _GEN_43 | _GEN_42 | _GEN_41 | _GEN_40 | _GEN_39
                        | _GEN_38
                          ? 8'h20
                          : _GEN_35 ? 8'h52 : _GEN_34,
                _GEN_14
                  ? 8'h55
                  : _GEN_62
                      ? 8'h20
                      : _GEN_58
                          ? 8'h5F
                          : _GEN_57
                              ? 8'h49
                              : _GEN_56 | _GEN_55 | _GEN_54
                                  ? 8'h20
                                  : _GEN_50
                                      ? 8'h49
                                      : _GEN_49 | _GEN_48 | _GEN_47 | _GEN_46 | _GEN_45
                                        | _GEN_44 | _GEN_43 | _GEN_42 | _GEN_41 | _GEN_40
                                        | _GEN_39 | _GEN_37
                                          ? 8'h20
                                          : _GEN_36 ? 8'h52 : _GEN_35 ? 8'h5F : _GEN_34,
                _GEN_18[_inst_fetcher_io__op], _GEN_65[_inst_fetcher_io__op],
                _GEN_14 | _GEN_13 | _GEN_12
                  ? 8'h5F
                  : _GEN_11 | _GEN_10
                      ? 8'h49
                      : _GEN_9 | _GEN_8 | _GEN_7 | _GEN_6
                          ? 8'h5F
                          : _GEN_61 | _GEN_60 | _GEN_59
                              ? 8'h53
                              : _GEN_5
                                  ? 8'h49
                                  : _GEN_58
                                      ? 8'h45
                                      : _GEN_57 | _GEN_56 | _GEN_55
                                          ? 8'h5F
                                          : _GEN_54
                                              ? 8'h49
                                              : _GEN_50
                                                  ? 8'h5F
                                                  : _GEN_49 | _GEN_48 | _GEN_47 | _GEN_46
                                                    | _GEN_45
                                                      ? 8'h49
                                                      : _GEN_44
                                                          ? 8'h5F
                                                          : _GEN_43 | _GEN_42
                                                              ? 8'h49
                                                              : _GEN_41
                                                                  ? 8'h4D
                                                                  : _GEN_40
                                                                      ? 8'h5F
                                                                      : _GEN_39
                                                                          ? 8'h4D
                                                                          : _GEN_38
                                                                              ? 8'h5F
                                                                              : _GEN_35
                                                                                | _GEN_33
                                                                                  ? 8'h4D
                                                                                  : _GEN_32
                                                                                      ? 8'h5F
                                                                                      : _GEN_31
                                                                                          ? 8'h49
                                                                                          : _GEN_30
                                                                                            | _GEN_29
                                                                                            | _GEN_28
                                                                                            | _GEN_27
                                                                                            | _GEN_26
                                                                                              ? 8'h5F
                                                                                              : _GEN_25
                                                                                                  ? 8'h52
                                                                                                  : _GEN_24,
                _GEN_64[_inst_fetcher_io__op], _GEN_63[_inst_fetcher_io__op],
                _GEN_17[_inst_fetcher_io__op], _GEN_16[_inst_fetcher_io__op],
                _GEN_15[_inst_fetcher_io__op], rs1_data, rs2_data);
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _GEN_66 = _inst_fetcher_io_inst_type == 3'h5;
  wire        _GEN_67 = _inst_fetcher_io_inst_type == 3'h6;
  wire        _GEN_68 = _GEN_67 & _GEN_12;
  wire        _GEN_69 = _GEN_1 | _GEN_2;
  wire        _GEN_70 = ~_GEN_69 & (_GEN_66 | _GEN_67 & _GEN_12);
  assign _GEN = _GEN_0 | (_GEN_4 ? ~_GEN_5 : _GEN_70);
  always @(posedge clock) begin
    if (reset)
      pc <= 32'h0;
    else if (_GEN_0 | _GEN_4 | _GEN_1)
      pc <= _regfile_io_write_data_T_23;
    else if (_GEN_2) begin
      if (_GEN_6
            ? rs1_data == rs2_data
            : _GEN_7
                ? rs1_data != rs2_data
                : _GEN_8
                    ? rs1_data < rs2_data
                    : _GEN_9 ? rs1_data >= rs2_data : ~_GEN_10 & _GEN_11)
        pc <= pc + _inst_fetcher_io_imm;
      else
        pc <= _regfile_io_write_data_T_23;
    end
    else if (_GEN_66 | ~_GEN_68)
      pc <= _regfile_io_write_data_T_23;
    else
      pc <= pc + _inst_fetcher_io_imm;
    rs1_data <=
      _GEN_4 | _GEN_3 & _regfile_io_read0_ready ? _regfile_io_read0_data : 32'h0;
    rs2_data <=
      _GEN_4
        ? _inst_fetcher_io_imm
        : _GEN_3 & _regfile_io_read1_ready ? _regfile_io_read1_data : 32'h0;
  end // always @(posedge)
  InstructionFetcher inst_fetcher (
    .io_inst      (io_inst),
    .io_rd_addr   (_inst_fetcher_io_rd_addr),
    .io_rs1_addr  (_inst_fetcher_io_rs1_addr),
    .io_rs2_addr  (_inst_fetcher_io_rs2_addr),
    .io_imm       (_inst_fetcher_io_imm),
    .io__op       (_inst_fetcher_io__op),
    .io_inst_type (_inst_fetcher_io_inst_type)
  );
  RegisterFile regfile (
    .clock          (clock),
    .reset          (reset),
    .io_read0_en    (_GEN_4 | _GEN_3),
    .io_read0_addr  (_GEN_4 | _GEN_3 ? _inst_fetcher_io_rs1_addr : 5'h0),
    .io_read0_data  (_regfile_io_read0_data),
    .io_read0_ready (_regfile_io_read0_ready),
    .io_read1_en    (_GEN_3),
    .io_read1_addr  (_GEN_3 ? _inst_fetcher_io_rs2_addr : 5'h0),
    .io_read1_data  (_regfile_io_read1_data),
    .io_read1_ready (_regfile_io_read1_ready),
    .io_write_en    (_GEN),
    .io_write_addr
      (_GEN_0 | (_GEN_4 ? ~_GEN_5 | _GEN : _GEN_70 | _GEN)
         ? _inst_fetcher_io_rd_addr
         : 5'h0),
    .io_write_data
      (_GEN_0 | _GEN_4 | _GEN_69
         ? 32'h0
         : _GEN_66
             ? (_GEN_13
                  ? _inst_fetcher_io_imm
                  : _GEN_14 ? pc + _inst_fetcher_io_imm : 32'h0)
             : _GEN_68 ? _regfile_io_write_data_T_23 : 32'h0)
  );
  assign io_rddata = rs1_data;
endmodule


