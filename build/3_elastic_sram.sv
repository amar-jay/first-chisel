// Generated by CIRCT firtool-1.62.1
// VCS coverage exclude_file
module mem_8x8(
  input  [2:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [7:0] R0_data,
  input  [2:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data
);

  reg [7:0] Memory[0:7];
  reg       _R0_en_d0;
  reg [2:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 8'bx;
endmodule

module ElasticSRAM(
  input        clock,
               reset,
  output       io_rreq_ready,
  input        io_rreq_valid,
  input  [2:0] io_rreq_bits,
  input        io_rres_ready,
  output       io_rres_valid,
  output [7:0] io_rres_bits,
  input        io_write_valid,
  input  [7:0] io_write_bits_data,
  input  [2:0] io_write_bits_idx,
  input        io_flush
);

  reg        last_val;
  reg  [2:0] last_idx;
  wire       s0_valid = io_rres_ready ? io_rreq_valid : last_val;
  reg        s1_valid;
  always @(posedge clock) begin
    if (reset) begin
      last_val <= 1'h0;
      last_idx <= 3'h0;
      s1_valid <= 1'h0;
    end
    else begin
      last_val <= ~io_flush & (io_rres_ready ? io_rreq_valid : last_val);
      if (~(io_flush | ~io_rres_ready))
        last_idx <= io_rreq_bits;
      s1_valid <= s0_valid;
    end
  end // always @(posedge)
  mem_8x8 mem_ext (
    .R0_addr (io_rres_ready ? io_rreq_bits : last_idx),
    .R0_en   (s0_valid),
    .R0_clk  (clock),
    .R0_data (io_rres_bits),
    .W0_addr (io_write_bits_idx),
    .W0_en   (io_write_valid),
    .W0_clk  (clock),
    .W0_data (io_write_bits_data)
  );
  assign io_rreq_ready = io_rres_ready;
  assign io_rres_valid = s1_valid;
endmodule


